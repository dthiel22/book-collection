{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","ADD_USER","gql","LOGIN_USER","SAVE_BOOK","DELETE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","data","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","log","variables","input","link","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_USER","SavedBooks","useQuery","loading","userData","me","deleteBook","userDataLength","Object","keys","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c668c10.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n      }\n    }\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        bookCount\n        savedBooks {\n          bookId\n          authors\n          description\n          title\n          image\n          link\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation SaveBook($token: String!, $input: InputBook) {\n    saveBook(token: $token, input: $input) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        title\n        authors\n        description\n        image\n        link\n      }\n    }\n  }\n`;\n\nexport const DELETE_BOOK = gql`\nmutation RemoveBook($token: String!, $bookId: String) {\n  removeBook(token: $token, bookId: $bookId) {\n    _id\n    username\n    email\n    bookCount\n    savedBooks {\n      bookId\n      authors\n      description\n      title\n      image\n      link\n    }\n  }\n}\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  //TODO: query object for saving book\n  const [saveBook, { error, data }] = useMutation(SAVE_BOOK); \n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      console.log(bookToSave)\n      console.log(token)\n      const response = await saveBook({\n        variables: { \n          token: token,\n          input: {\n            bookId: bookToSave.bookId,\n            title: bookToSave.title,\n            authors: bookToSave.authors,\n            description: bookToSave.description,\n            image: bookToSave.image,\n            link: bookToSave.link\n          }\n        },\n      });\n\n\n      if (!response.ok) {\n        console.log(response)\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\n\nexport const QUERY_USER = gql`\nquery Me($token: String!) {\n  me(token: $token) {\n    _id\n    username\n    email\n    bookCount\n    savedBooks {\n      authors\n      bookId\n      description\n      title\n      image\n      link\n    }\n  }\n}\n`;\n\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\n\n\n\nconst SavedBooks = () => {\n  const token = Auth.loggedIn() ? Auth.getToken() : null;\n  const { loading, data } = useQuery(QUERY_USER, {\n    variables: {\n      token:token\n    }\n  });\n  const userData = data?.me || [];\n\n  const [deleteBook, { error, data:data2 }] = useMutation(DELETE_BOOK);\n\n  \n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n  \n  // cons\n  // const userData = data?.characters || [];\n  \n  //TODO: \n  // useEffect(() => {\n  //   const getUserData = async () => {\n  //     try {\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  //       if (!token) {\n  //         return false;\n  //       }\n\n  //       const response = await getMe(token);\n\n  //       if (!response.ok) {\n  //         throw new Error('something went wrong!');\n  //       }\n\n  //       const user = await response.json();\n  //       setUserData(user);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //   };\n\n  //   getUserData();\n  // }, [userDataLength]);\n  //TODO:\n\n  \n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook({\n        variables: { \n          token:token,\n          bookId:bookId\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const updatedUser = await response.json();\n      userData = updatedUser;\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n// import { createUser } from '../utils/API';\n\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  //TODO: Mutation insert here\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    //TODO: INSERT THE MUTATION HERE\n    try {\n      const { data } = await addUser({\n        variables: { \n          username:userFormData.username,\n          email:userFormData.email,\n          password:userFormData.password\n        },\n      });\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n    // try {\n    //   // const response = await createUser(userFormData);\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n // set initial form state\n const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n // set state for form validation\n const [validated] = useState(false);\n // set state for alert\n const [showAlert, setShowAlert] = useState(false);\n\n //TODO: Mutation insert here\n const [login, { error, data }] = useMutation(LOGIN_USER);\n\n const handleInputChange = (event) => {\n   const { name, value } = event.target;\n   setUserFormData({ ...userFormData, [name]: value });\n };\n\n const handleFormSubmit = async (event) => {\n   event.preventDefault();\n\n   // check if form has everything (as per react-bootstrap docs)\n   const form = event.currentTarget;\n   if (form.checkValidity() === false) {\n     event.preventDefault();\n     event.stopPropagation();\n   }\n   //TODO: INSERT THE MUTATION HERE\n   try {\n     const { data } = await login({\n       variables: { \n         email:userFormData.email,\n         password:userFormData.password\n       },\n     });\n     Auth.login(data.login.token);\n   } catch (e) {\n     console.error(e);\n   }\n   // try {\n   //   // const response = await createUser(userFormData);\n\n   //   if (!response.ok) {\n   //     throw new Error('something went wrong!');\n   //   }\n\n   //   const { token, user } = await response.json();\n   //   console.log(user);\n   //   Auth.login(token);\n   // } catch (err) {\n   //   console.error(err);\n   //   setShowAlert(true);\n   // }\n\n   setUserFormData({\n     username: '',\n     email: '',\n     password: '',\n   });\n };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  // uri: 'http://localhost:3001/graphql',\n  uri: 'https://at-book-collection.herokuapp.com/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<SearchBooks />} />\n          <Route path=\"/saved\" element={<SavedBooks />} />\n          <Route\n            path=\"*\"\n            element={<h1 className=\"display-2\">Wrong page!</h1>}\n          />\n        </Routes>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}